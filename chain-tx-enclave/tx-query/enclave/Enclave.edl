enclave {
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_net.edl" import *;
    from "sgx_time.edl" import *;
    from "sgx_tstdc.edl" import *;

    include "sgx_quote.h"

    trusted {
        public sgx_status_t run_server(int fd, int timeout);
    };
    untrusted {
        sgx_status_t ocall_encrypt_request(
                [in, size = request_len] uint8_t * request,
                uint32_t request_len,
                [out, size = result_len] uint8_t * result,
                uint32_t result_len);

        sgx_status_t ocall_get_txs(
                [in, size = txids_len] uint8_t * txids,
                uint32_t txids_len,
                [out, size = txs_len] uint8_t * txs,
                uint32_t txs_len);
    
        sgx_status_t ocall_get_ias_key([out, size = ias_key_len] uint8_t * ias_key,
                uint32_t ias_key_len);
        sgx_status_t ocall_sgx_init_quote([out] sgx_target_info_t *ret_ti,
                      [out] sgx_epid_group_id_t *ret_gid);
        sgx_status_t ocall_get_ias_socket([out] int *ret_fd);
        sgx_status_t ocall_get_quote(  [in, size = sigrl_len] uint8_t * p_sigrl,
                                       uint32_t sigrl_len,
                                       [in] sgx_report_t *report,
                                       sgx_quote_sign_type_t quote_type,
                                       [in] sgx_quote_nonce_t *p_nonce,
                                       [out] sgx_report_t *p_qe_report,
                                       [out, size = maxlen] sgx_quote_t *p_quote,
                                       uint32_t maxlen,
                                       [out] uint32_t* p_quote_len);
    sgx_status_t ocall_get_update_info([in] sgx_platform_info_t * platformBlob,
                       int32_t enclaveTrusted,
                       [out] sgx_update_info_bit_t * update_info);
    };
};